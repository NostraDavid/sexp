"""
Tests for the S-expression parser.
"""

import base64
import pytest
from hypothesis import given, strategies as st, settings, HealthCheck

from sexp.parser import SExpressionParser


def chrs(start: int, end: int) -> str:
    """Generates a string of characters in a given range."""
    return "".join(chr(c) for c in range(start, end))


# According to RFC 9804 ABNF
SP = 0x20  # Space character in ASCII
HTAB = 0x09  # Horizontal tab character in ASCII
CR = 0x0D  # Carriage return character in ASCII
LF = 0x0A  # Line feed character in ASCII
DIGIT = chrs(0x30, 0x3A)
ALPHA = chrs(0x61, 0x7B) + chrs(0x41, 0x5B)
HEXDIGIT = DIGIT + "abcdef" + "ABCDEF"
OCTET = list(range(256))  # All possible byte values (0-255)
DQUOTE = '"'
VTAB = 0x0B  # Vertical tab character in ASCII
FF = 0x0C  # Form feed character in ASCII
BACKSLASH = "\\"
QUOTE = "'"
PRINTABLE = chrs(0x20, 0x21) + chrs(0x23, 0x5B) + chrs(0x5D, 0x7F)
SIMPLE_PUNC = "-./_:*+="

TOKEN_START_CHARS = ALPHA + SIMPLE_PUNC
TOKEN_CHARS = TOKEN_START_CHARS + DIGIT

# Strategy for generating valid tokens
st_tokens = st.text(alphabet=TOKEN_CHARS, min_size=1).filter(
    lambda s: s[0] in TOKEN_START_CHARS
)

# Strategy for generating content for verbatim strings
# The content can be any string.
st_verbatim_content = st.text(max_size=200)
# Strategy for generating valid verbatim strings and their expected content
@st.composite
def st_verbatim_strings_with_content(draw):
    """Generates a tuple of (verbatim_string, expected_content)."""
    content = draw(st_verbatim_content)
    # Use utf-8 encoding to correctly calculate byte length for the prefix
    encoded_content = content.encode("utf-8")
    verbatim_string = f"{len(encoded_content)}:{content}"
    return (verbatim_string, content)


@settings(suppress_health_check=[HealthCheck.filter_too_much])
@given(token=st_tokens)
def test_parse_token(token: str):
    """
    Tests that the parser correctly handles valid tokens generated by the strategy.
    """
    parser = SExpressionParser(token)
    result = parser.parse()
    assert result == token


@given(data=st_verbatim_strings_with_content())
def test_parse_verbatim_string(data):
    """
    Tests that the parser correctly handles verbatim strings.
    """
    verbatim_string, expected_content = data
    parser = SExpressionParser(verbatim_string)
    result = parser.parse()
    assert result == expected_content
